name: Build and Deploy to GKE
on:
  push:
    branches:
      - master
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ vars.GKE_PROJECT }}
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ vars.GKE_CLUSTER }}
        location: ${{ vars.GKE_ZONE }}

    # Build and push both Docker images
    - name: Build and push Docker images
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev
       
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        
        # Build and push main application image
        export APP_IMAGE_TAG=${{ vars.BASE_IMAGE_TAG }}/$REPO_NAME:${{ github.sha }}
        echo "Building main Docker image with tag: $APP_IMAGE_TAG"
        docker build -t $APP_IMAGE_TAG .
        echo "Pushing main Docker image to registry."
        docker push $APP_IMAGE_TAG
        
        # Build and push migrations image
        export MIGRATION_IMAGE_TAG=${{ vars.BASE_IMAGE_TAG }}/$REPO_NAME-migrations:${{ github.sha }}
        echo "Building migrations Docker image with tag: $MIGRATION_IMAGE_TAG"
        docker build -t $MIGRATION_IMAGE_TAG -f Dockerfile.migrations .
        echo "Pushing migrations Docker image to registry."
        docker push $MIGRATION_IMAGE_TAG
        
        # Save image tags for next step
        echo "APP_IMAGE_TAG=$APP_IMAGE_TAG" >> $GITHUB_ENV
        echo "MIGRATION_IMAGE_TAG=$MIGRATION_IMAGE_TAG" >> $GITHUB_ENV

    # Deploy to GKE
    - name: Deploy to GKE
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        
        # Replace image placeholders
        sed -i "s|<MIGRATION_IMAGE_PLACEHOLDER>|$MIGRATION_IMAGE_TAG|g" k8s/migration-job.yaml
        sed -i "s|<IMAGE_PLACEHOLDER>|$APP_IMAGE_TAG|g" k8s/deployment.yaml
        
        # Run migrations first
        kubectl apply -f k8s/migration-job.yaml
        
        # Wait for migrations to complete
        echo "Waiting for migrations to complete..."
        while true; do
          status=$(kubectl get job db-migrations -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')
          if [ "$status" == "True" ]; then
            echo "Migrations completed successfully"
            break
          fi
          
          failed=$(kubectl get job db-migrations -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}')
          if [ "$failed" == "True" ]; then
            echo "Migrations failed"
            kubectl logs job/db-migrations -c migrations
            exit 1
          fi
          
          echo "Still running..."
          sleep 5
        done
        
        # Delete the migration job
        kubectl delete job db-migrations
        
        # Apply main application
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/server
